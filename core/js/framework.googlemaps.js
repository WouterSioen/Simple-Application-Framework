// Generated by CoffeeScript 1.7.1
(function() {
  var GoogleMaps,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GoogleMaps = (function(_super) {
    var maps, markers, markersLat, markersLng, multiple;

    __extends(GoogleMaps, _super);

    function GoogleMaps() {
      return GoogleMaps.__super__.constructor.apply(this, arguments);
    }

    GoogleMaps.prototype.dragAndDrop = function() {
      $('.sequenceByDragAndDrop tbody').sortable({
        items: 'tr',
        handle: 'td.dragAndDropHandle',
        helper: function(e, tr) {
          var helper, originals;
          originals = tr.children();
          helper = tr.clone();
          helper.children().each(function(index) {
            return $(this).width(originals.eq(index).width());
          });
          return helper;
        },
        stop: function(event, ui) {
          var newIdSequence, rows, table;
          table = $(this);
          rows = $(this).find('tr');
          newIdSequence = [];
          rows.each(function() {
            newIdSequence.push($(this).data('id'));
          });
          return $.ajax({
            data: {
              newIdSequence: JSON.stringify(newIdSequence)
            },
            url: '/ajax.php?module=themes&action=update_order&language=' + Data.get('core.language'),
            success: function(data) {
              if (data.code !== 200) {
                table.sortable('cancel');
              }
            },
            error: function() {
              table.sortable('cancel');
            }
          });
        }
      });
    };

    markers = [];

    maps = [];

    markersLat = [];

    markersLng = [];

    multiple = [];

    GoogleMaps.prototype.Initialize = function() {
      var mapcanvases;
      mapcanvases = $('.googleMapsMap');
      return mapcanvases.each(function(index, element) {
        var $id, $inputCenter, $inputLat, $inputLng, $inputZoom, $this, bounds, i, latLngCenter, mapoptions;
        $this = $(this).get(0);
        $id = $this.id;
        $inputLat = $('#' + $id + '_lat');
        $inputLng = $('#' + $id + '_lng');
        $inputZoom = $('#' + $id + '_zoom');
        $inputCenter = $('#' + $id + '_center');
        multiple[$id] = this.getAttribute('data-multipleMarkers');
        latLngCenter = $inputCenter.val().split(',');
        markersLat[$id] = $inputLat.val().split(',');
        markersLng[$id] = $inputLng.val().split(',');
        if (markersLat[$id].length === 1 && markersLat[$id][0] === '') {
          markersLat[$id] = [];
          markersLng[$id] = [];
        }
        mapoptions = {
          zoom: parseInt($inputZoom.val()),
          center: new google.maps.LatLng(latLngCenter[0], latLngCenter[1]),
          disableDefaultUI: true,
          panControl: true,
          zoomControl: true
        };
        maps[$id] = new google.maps.Map($this, mapoptions);
        google.maps.event.addListener(maps[$id], 'center_changed', function() {
          return $inputCenter.val(this.center.lat() + ',' + this.center.lng());
        });
        google.maps.event.addListener(maps[$id], 'zoom_changed', function() {
          return $inputZoom.val(this.zoom);
        });
        i = markersLat[$id].length;
        markersLat = markersLat[$id];
        markersLng = markersLng[$id];
        while (i > 0) {
          i--;
          GoogleMaps.current.PlaceMarker($id, new google.maps.LatLng(markersLat[i], markersLng[i]));
        }
        google.maps.event.addListener(maps[$id], "click", function(event) {
          return GoogleMaps.current.PlaceMarker($id, event.latLng);
        });
        if (this.getAttribute('data-centerMarkers') === 'true') {
          bounds = new google.maps.LatLngBounds();
          i = 0;
          while (i < markers[$id].length) {
            bounds.extend(markers[$id][i].getPosition());
            i++;
          }
          return maps[$id].fitBounds(bounds);
        }
      });
    };

    GoogleMaps.prototype.SaveMarkers = function($id) {
      var i, _i, _len, _ref;
      markersLat[$id] = [];
      markersLng[$id] = [];
      _ref = markers[$id];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        markersLat[$id].push(i.position.lat());
        markersLng[$id].push(i.position.lng());
      }
      $('#' + $id + '_lat').val(markersLat[$id].join(','));
      return $('#' + $id + '_lng').val(markersLng[$id].join(','));
    };

    GoogleMaps.prototype.PlaceMarker = function($id, location) {
      var i, marker, _i, _len, _ref;
      if (markers.hasOwnProperty($id) && multiple[$id] === 'false') {
        _ref = markers[$id];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.setMap(null);
        }
        markers[$id].length = 0;
      }
      marker = new google.maps.Marker({
        position: location,
        map: maps[$id]
      });
      google.maps.event.addListener(marker, 'click', function() {
        var index;
        marker.setMap(null);
        i = 0;
        while (i < markers[$id].length) {
          if (markers[$id][i].getPosition().equals(marker.getPosition())) {
            index = markers[$id].indexOf(marker);
            markers[$id].splice(index, 1);
            break;
          }
          i++;
        }
        return GoogleMaps.current.SaveMarkers($id);
      });
      if (!markers.hasOwnProperty($id)) {
        markers[$id] = [];
      }
      markers[$id].push(marker);
      return GoogleMaps.current.SaveMarkers($id);
    };

    GoogleMaps.prototype.Load = function() {
      var script;
      if ($('.googleMapsMap').length > 0) {
        script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=true&' + 'callback=GoogleMaps.current.Initialize';
        return document.body.appendChild(script);
      }
    };

    GoogleMaps.events;

    GoogleMaps.onDomReady([]);

    return GoogleMaps;

  })(Framework);

  GoogleMaps.current = new GoogleMaps();

  $(function() {
    return GoogleMaps.current.Load();
  });

  window.GoogleMaps = GoogleMaps;

}).call(this);
